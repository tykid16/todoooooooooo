import { describe, test, expect, beforeEach } from 'bun:test'
import { Hono } from 'hono'
import { todosRoute } from '../src/routes/todos'

// Create a test app that uses the todos route
function createTestApp() {
  const app = new Hono()
  app.route('/api/todos', todosRoute)
  return app
}

describe('TODO API Integration Tests', () => {
  let app: Hono

  beforeEach(() => {
    app = createTestApp()
  })

  describe('GET /api/todos', () => {
    test('should return array of todos', async () => {
      const res = await app.request('/api/todos')
      expect(res.status).toBe(200)
      
      const data = await res.json()
      expect(Array.isArray(data)).toBe(true)
    })
  })

  describe('POST /api/todos', () => {
    test('should create a new todo', async () => {
      const newTodo = { title: 'Test Todo' }
      
      const res = await app.request('/api/todos', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newTodo)
      })
      
      expect(res.status).toBe(201)
      
      const todo = await res.json()
      expect(todo.title).toBe('Test Todo')
      expect(todo.completed).toBe(false)
      expect(todo.id).toBeDefined()
    })

    test('should require title field', async () => {
      const res = await app.request('/api/todos', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({})
      })
      
      expect(res.status).toBe(400)
      
      const error = await res.json()
      expect(error.error).toBe('Title is required')
    })

    test('should reject empty title', async () => {
      const res = await app.request('/api/todos', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title: '   ' })
      })
      
      expect(res.status).toBe(400)
    })
  })

  describe('PATCH /api/todos/:id', () => {
    test('should update todo completion status', async () => {
      // First create a todo
      const createRes = await app.request('/api/todos', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title: 'Update Test' })
      })
      
      const todo = await createRes.json()
      
      // Then update it
      const updateRes = await app.request(`/api/todos/${todo.id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ completed: true })
      })
      
      expect(updateRes.status).toBe(200)
      
      const updated = await updateRes.json()
      expect(updated.completed).toBe(true)
      expect(updated.title).toBe('Update Test')
    })

    test('should return 404 for non-existent todo', async () => {
      const res = await app.request('/api/todos/999', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ completed: true })
      })
      
      expect(res.status).toBe(404)
    })

    test('should validate completed field', async () => {
      const res = await app.request('/api/todos/1', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ completed: 'invalid' })
      })
      
      expect(res.status).toBe(400)
    })
  })

  describe('DELETE /api/todos/:id', () => {
    test('should delete a todo', async () => {
      // First create a todo
      const createRes = await app.request('/api/todos', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title: 'Delete Test' })
      })
      
      const todo = await createRes.json()
      
      // Then delete it
      const deleteRes = await app.request(`/api/todos/${todo.id}`, {
        method: 'DELETE'
      })
      
      expect(deleteRes.status).toBe(200)
      
      const result = await deleteRes.json()
      expect(result.message).toBe('Todo deleted successfully')
    })

    test('should return 404 for non-existent todo', async () => {
      const res = await app.request('/api/todos/999', {
        method: 'DELETE'
      })
      
      expect(res.status).toBe(404)
    })
  })
})